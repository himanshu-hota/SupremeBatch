class Solution {

  // public int solve(int prices[],int day,int hasStock,int limit){
  //     if(day == prices.length || limit == 0) return 0;

  //     // Do nothing wala case
  //     int profit1 = solve(prices,day+1,hasStock,limit);
  //     int profit2 = Integer.MIN_VALUE;  

  //     // sell wala case
  //     if(hasStock == 1){
  //         profit2 = prices[day] + solve(prices,day+1,0,limit-1);
  //     }else{ // buy wala case
  //         profit2 = -prices[day] + solve(prices,day+1,1,limit);
  //     }

  //     return Math.max(profit2,profit1);
  // }

  // public int topDown(int prices[],int day,int hasStock,int limit,int dp[][][]){
  //     if(day == prices.length || limit == 0) return 0;

  //     if(dp[day][hasStock][limit] != -1) return dp[day][hasStock][limit];

  //     // Do nothing wala case
  //     int profit1 = solve(prices,day+1,hasStock,limit);
  //     int profit2 = Integer.MIN_VALUE;

  //     // sell wala case
  //     if(hasStock == 1){
  //         profit2 = prices[day] + solve(prices,day+1,0,limit-1);
  //     }else{ // buy wala case
  //         profit2 = -prices[day] + solve(prices,day+1,1,limit);
  //     }

  //     dp[day][hasStock][limit] = Math.max(profit2,profit1);

  //     return dp[day][hasStock][limit];
  // }

  // public int bottomUp(int prices[]){

  //     int n = prices.length;
  //     int dp[][][] = new int[n+1][2][3];        

  //     for(int day = n-1; day >=0; day--){
  //         for(int hasStock = 1; hasStock >=0; hasStock--){
  //             for(int limit = 1 ; limit<=2 ; limit++){ // limit 0 k liye 0 hi ans hoga jo ki already stored hai isiliye limit  ko ` se start kiya hai
  //                 // Do nothing wala case
  //                 int profit1 = dp[day+1][hasStock][limit];
  //                 int profit2 = Integer.MIN_VALUE;

  //                 // sell wala case
  //                 if(hasStock == 1){
  //                     profit2 = prices[day] + dp[day+1][0][limit-1];
  //                 }else{ // buy wala case
  //                     profit2 = -prices[day] + dp[day+1][1][limit];
  //                 }

  //                 dp[day][hasStock][limit] = Math.max(profit2,profit1);

  //             }
  //         }
  //     }

  //     // 0 0 2 kaise? --> loop ko dekho upar se niche range ko.
  //     // pahle for ka range >=0 so 0 yaha se le liye.
  //     // dusre for ka range >=0 so 0 yaha se le liya.
  //     // teesre for ka range <=2 so 2 yaha se le liya.
  //     return dp[0][0][2];
  // }

  public int spaceOptimized(int prices[]) {

    int n = prices.length;
    int dp[][][] = new int[2][2][3];

    for (int day = n - 1; day >= 0; day--) {
      for (int hasStock = 1; hasStock >= 0; hasStock--) {
        for (int limit = 1; limit <= 2; limit++) { // limit 0 k liye 0 hi ans hoga jo ki already stored hai isiliye limit  ko ` se start kiya hai
          // Do nothing wala case
          int profit1 = dp[1][hasStock][limit];
          int profit2 = Integer.MIN_VALUE;

          // sell wala case
          if (hasStock == 1) {
            profit2 = prices[day] + dp[1][0][limit - 1];
          } else { // buy wala case
            profit2 = -prices[day] + dp[1][1][limit];
          }

          dp[0][hasStock][limit] = Math.max(profit2, profit1);

        }

      }
      int temp[][] = dp[0];
      dp[0] = dp[1];
      dp[1] = temp;
    }

    // 1 0 2 kaise? --> yaha 2*2*2 ka matrix hai in other words 3d hai.
    // jab swapping karte hue aate hai to last wale range ko pakdo pahle subsript k liye
    // in other words hum [x][][] x ko 0 -> 1 le ja rahe hai to last yani ki 1 ko pakdo baki subscript ko same rahne do.
    // dusre for ka range >=0 so 0 yaha se le liya.
    // teesre for ka range <=2 so 2 yaha se le liya.
    return dp[1][0][2];
  }

  public int maxProfit(int[] prices) {
    // recursive
    // int ans = solve(prices,0,0,2);

    // topDown
    // int n = prices.length;
    // int dp[][][] = new int[n+1][2][3];
    // for(int twoD[][] : dp) {
    //     for(int row[]:twoD){
    //         Arrays.fill(row,-1);
    //     }
    // }
    // int ans = topDown(prices,0,0,2,dp);

    // bottomUp 
    // int ans = bottomUp(prices);

    // spaceOptimized
    int ans = spaceOptimized(prices);
    return ans;
  }
}

LeetCode :- https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/description/