import java.util.Arrays;

class Solution {

 // ye karna jaruri hai kyoki int_max se answer galat aa raha hai.
 int INF = 1000007 +1;

 // find uppper bound
 public static int bs(int[] arr, int target) {
        int left = 0;
        int right = arr.length;

        while (left < right) {
            int mid = left + (right - left) / 2;

            if (arr[mid] <= target) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }

        return left;
    }

    public int solve(int arr1[], int arr2[], int prev, int i) {
        if (i >= arr1.length)
            return 0;

        // ek bar current ko kuchh mat karo
        int op1 = INF;
        if (arr1[i] > prev) {
            op1 = 0 + solve(arr1, arr2, arr1[i], i + 1);
        }

        // aur ek bar current ko is se just bada number jo ki arr2 me hai us se replace kar do aur fir ans nikalo.
        // array me modification nahi karna hai , just assume karna hai ki kiya hai.
        // +1 kiya kyoki ek operation kiya hai.
        int index = bs(arr2, prev);
        int op2 = INF;
        if (index < arr2.length) {
            op2 = 1 + solve(arr1, arr2, arr2[index], i + 1);
        }

        return Math.min(op1, op2);
    }

    Map<Integer,Map<Integer,Integer>> dp = new HashMap<>();
    public int topDown(int arr1[], int arr2[], int prev, int i) {
        if (i >= arr1.length)
            return 0;

        if(dp.getOrDefault(prev,null) != null && dp.get(prev).getOrDefault(i,null) != null) return dp.get(prev).get(i);

        int op1 = INF;
        if (arr1[i] > prev) {
            op1 = 0 + topDown(arr1, arr2, arr1[i], i + 1);
        }

        int index = bs(arr2, prev);
        int op2 = INF;
        if (index < arr2.length) {
            op2 = 1 + topDown(arr1, arr2, arr2[index], i + 1);
        }

        int ans = Math.min(op1, op2);

        Map<Integer,Integer> map = new HashMap<>();
        map.put(i,ans);
        dp.put(prev,map);

        return ans;
    }


    public int makeArrayIncreasing(int[] arr1, int[] arr2) {
        Arrays.sort(arr2);
        // recursive
        // int ans = solve(arr1, arr2, -1, 0);

        // topdown
        int ans = topDown(arr1, arr2, -1, 0);


        if (ans == INF)
            return -1;
        else
            return ans;
    }
}


LeetCode :- https://leetcode.com/problems/make-array-strictly-increasing/description/