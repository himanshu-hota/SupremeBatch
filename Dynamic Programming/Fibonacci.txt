class Solution {

    // static int recursive(int n , int dp[]){
    //     if(n == 0 || n == 1){
    //         return n;
    //     }

    //     int ans = solve(n-1,dp) + solve(n-2,dp);

    //     return ans;
    // }

    // static int topDown(int n , int dp[]){
    //     if(n == 0 || n == 1){
    //         return n;
    //     }
        
    //     // step 3 : check if already exists
    //     if(dp[n] != -1){
    //         return dp[n];
    //     }

    //     // step 2 : store calculated value.
    //     dp[n] = topDown(n-1,dp) + topDown(n-2,dp);

    //     return dp[n];
    // }

    // static int bottomUp(int n){
    //     if(n == 0 || n == 1){
    //         return n;
    //     }

    //     // steps 1 : create dp array
    //     int dp[] = new int[n+1];
    //     Arrays.fill(dp,-1);

    //     dp[0] = 0;
    //     dp[1] = 1;

    //     // step 2 : store ans
    //     for(int i = 2; i <= n ; i++){
    //         dp[i] = dp[i-1] + dp[i-2];
    //     }

    //     return dp[n];
    // } 
    static int spaceOptimized(int n){
        if(n==0 || n==1) return n;
        
        int prev1 = 1;
        int prev2 = 0;
        int curr = 0;
        for(int i =2 ; i<=n;i++){
            curr = prev1 + prev2;
            prev2 = prev1;
            prev1 = curr;
        }
        
        return curr;
    }
    public int fib(int n) {
        
        
        int ans = spaceOptimized(n);
        return ans;
    }
}
Time Complexity :- O(n)
Space Complexity :- O(n)

LeetCode :- https://leetcode.com/problems/fibonacci-number/description/