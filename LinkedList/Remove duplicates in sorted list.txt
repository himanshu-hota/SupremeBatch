// ---------------------------------------- Method 1 -------------------------------------------

Node removeDuplicates(Node head) {
    if (head == null || head.next == null) return head;

    Node temp = head;

    while (temp != null) {
        Node curr = temp;
        
        // Check if the current node has a duplicate
        if (curr.next != null) {
            while (curr.next != null && curr.data == curr.next.data) {
                curr = curr.next;
            }
        }
        
        temp.next = curr.next; // Remove duplicates by updating temp.next to the next distinct value
        
        temp = temp.next; // Move temp to the next distinct value
    }
    
    return head; // Return the modified linked list
}


// ---------------------------------------- Method 2 -------------------------------------------

public ListNode deleteDuplicates(ListNode head) {
    if (head == null || head.next == null) return head;

    ListNode temp = head;

    while (temp != null) {
        ListNode curr = temp;
        
        // Check if the current node has a duplicate
        if (curr.next != null) {
            while (curr.next != null && curr.val == curr.next.val) {
                curr = curr.next;
            }
        }
        
        temp.next = curr.next; // Remove duplicates by updating temp.next to the next distinct value
        
        temp = temp.next; // Move temp to the next distinct value

    }        

    return head; // Return the modified linked list
}

// ---------------------------------------- Method 3 -------------------------------------------


 public ListNode deleteDuplicates(ListNode head) {
        if (head == null || head.next == null) return head;

        ListNode current = head;

        while (current != null && current.next != null) {
            if (current.val == current.next.val) {
                current.next = current.next.next; // Skip the next node if it is a duplicate
            } else {
                current = current.next; // Move to the next distinct node
            }
        }

        return head;
    }

GFG :- https://practice.geeksforgeeks.org/problems/remove-duplicate-element-from-sorted-linked-list/1

LeetCode :- https://leetcode.com/problems/remove-duplicates-from-sorted-list/submissions/969410410/












public ListNode deleteDuplicates(ListNode head) {
    // Check if the list is empty or contains only one node
    if(head == null || head.next == null){
         return head;
    }

    // Create a new node 'prev' and set its next to the head of the list
    ListNode prev = new ListNode();
    prev.next = head;
    // Create a current node and initialize it with 'prev'
    ListNode curr = prev;

    // Traverse the list
    while(curr.next != null && curr.next.next != null){
        // Check if current node's value is equal to the next node's value
        if(curr.next.val == curr.next.next.val){
            int value = curr.next.val;
            // Skip all nodes with the same value as 'value'
            while(curr.next != null && curr.next.val == value){
                curr.next = curr.next.next;
            }
        }
        else{
            // Move to the next node
            curr = curr.next;
        }  
    }
    
    // Return the head of the modified list
    return prev.next;
}


LeetCode :- https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/description/
