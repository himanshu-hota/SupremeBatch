// Method 1

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public int findLen(ListNode head){

        if(head == null) return 0;
        if(head.next == null) return 1;

        ListNode temp = head;

        int count = 0;

        while(temp != null){
            count++;
            temp = temp.next;
        }


        return count;
    }

    public ListNode removeNthFromEnd(ListNode head, int n) {
        
        if(head == null) return head;

        // calculate length of the linkedlist
        int len = findLen(head);

        // if target is out of bound then no need to delete.
        if(n > len) return head;
        // if asked to delete  the first node then simply return head.next
        if(n == len) return head.next;

        int nodeToDelete = len - n - 1; // -1 because len - n gives the position and we want the index.
        int index = 0;

        ListNode curr = head;

        // Go to 1 node before the target.
        while( curr != null && index < nodeToDelete){
            curr = curr.next;
            index++;
        }

        curr.next  = curr.next.next;

        return head;


    }
}

// Method 2

class Solution {

    static int findLen(ListNode head){
        ListNode temp = head;
        int count  =0;
        while(temp != null){
            temp = temp.next;
            count++;
        }

        return count;
    }

    public ListNode removeNthFromEnd(ListNode head, int n) {
        if(head == null) return head;

        // calculate length of the linkedlist
        int len = findLen(head);

        // if list has only one element and n == 1
        if(len <= 1 && n ==1) return head.next;
        // if it asks to delete first node
        if(len == n) return head.next;
        // if node to delete doesn't exists
        if(n > len) return head;
        
        ListNode curr = head;
        // calculate index of node to delete
        int nodeToDelete = len - n;
        int count = 1;

        // go to 1 node before the nodeToDelete
        while(count < nodeToDelete && curr != null){
            curr = curr.next;
            count++;
        }

        // remove the node
        curr.next = curr.next.next;
     
        // return modified head;
        return head;


    }
}

LeetCode :- https://leetcode.com/problems/remove-nth-node-from-end-of-list/description/

CodeStudio :- https://www.codingninjas.com/codestudio/problems/delete-kth-node-from-end-in-linked-list_799912?leftPanelTab=1