public ListNode detectCycle(ListNode head) {
    // Check if head is null or there is only one node in the list
    if(head == null || head.next == null)
        return null;

    // Initialize two pointers: fast and slow
    ListNode fast = head;
    ListNode slow = head;

    // Loop until fast and fast.next are not null
    while(fast != null && fast.next != null){
        // Move slow pointer one step ahead
        slow = slow.next;
        // Move fast pointer two steps ahead
        fast = fast.next.next;
        
        // Check if fast and slow pointers meet
        if(slow == fast) {
            // Reset slow pointer to the head
            slow = head;
            
            // Move slow and fast pointers one step at a time until they meet
            while(slow != fast){
                slow = slow.next;
                fast = fast.next;
            }

            // Return the node where the cycle begins
            return slow;
        }
    }

    // No cycle found
    return null;
}

LeetCode :- https://leetcode.com/problems/linked-list-cycle-ii/description/