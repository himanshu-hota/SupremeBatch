class Solution {

    public int findLen(ListNode head){
        ListNode curr = head;
        int n = 0;

        while( curr != null ){
            curr = curr.next;
            n++;
        }
        
        return n;

    }

    public ListNode rotateRight(ListNode head, int k) {
     
        if(head == null || head.next == null) return head;

        int n = findLen(head);

        if(k>n) k = k%n;

        if(k == 0 || k == n) return head;

        // go to till this node (the node just before our newHead)
        int pos = n-k-1;

        ListNode tail = head;
        
        for(int i = 0; i< pos; i++){
            tail = tail.next;
        }

        // break the link and make newHead
        ListNode newHead = tail.next;
        tail.next = null;

        // Go to the last node
        ListNode temp = newHead;

        while(temp!= null && temp.next != null) temp = temp.next;

        // connect this last node with starting node of previous list
        temp.next = head;

        // final answer.
        return newHead;

    }
}


LeetCode :- https://leetcode.com/problems/rotate-list/description/

CodeStudio : https://www.codingninjas.com/studio/problems/rotate-linked-list_920454?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTabValue=SUBMISSION