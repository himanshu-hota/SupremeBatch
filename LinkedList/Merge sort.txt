

class Solution {
    // Function to find the middle node of a linked list
    static Node getMiddle(Node head) {
        // Check if the list is empty or contains only one node
        if (head == null || head.next == null)
            return head;
        
        // Use the two-pointer technique to find the middle node
        Node slow = head;
        Node fast = head.next;
        
        while (fast != null) {
            fast = fast.next;
            if (fast != null) {
                fast = fast.next;
                slow = slow.next;
            }
        }
        
        return slow;
    }
    
    // Function to perform merge sort on a linked list
    static Node mergeSort(Node head) {
        // Check if the list is empty or contains only one node
        if (head == null || head.next == null)
            return head;
        
        Node mid = getMiddle(head);
        
        Node head1 = head;
        Node head2 = mid.next;
        mid.next = null;
        
        Node newHead1 = mergeSort(head1);
        Node newHead2 = mergeSort(head2);
        Node finalHead = merge(newHead1, newHead2);
        
        return finalHead;
    }
    
    // Function to merge two sorted linked lists
    static Node merge(Node head1, Node head2) {
        // Create a new node 'merged' to store the merged list
        Node merged = new Node(-1);
        Node temp = merged;
        
        // Merge the two lists by comparing the node values
        while (head1 != null && head2 != null) {
            if (head1.data < head2.data) {
                temp.next = head1;
                head1 = head1.next;
            } else {
                temp.next = head2;
                head2 = head2.next;
            }
            temp = temp.next;
        }
        
        // Append any remaining nodes from the first list
        while (head1 != null) {
            temp.next = head1;
            head1 = head1.next;
            temp = temp.next;
        }
        
        // Append any remaining nodes from the second list
        while (head2 != null) {
            temp.next = head2;
            head2 = head2.next;
            temp = temp.next;
        }
        
        return merged.next;
    }
}




GFG :- https://practice.geeksforgeeks.org/problems/sort-a-linked-list/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article

CodeStudio :- https://www.codingninjas.com/codestudio/problems/merge-sort-linked-list_920473?leftPanelTab=1

LeetCode :- https://leetcode.com/problems/sort-list/submissions/703807651/