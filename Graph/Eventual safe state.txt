
class Solution {
    
     public boolean checkCycle(int src,Map<Integer,Boolean> visited,Map<Integer,Boolean> DFSvisited,List<List<Integer>> adj,List<Integer> safeNodes){
        
        // visited mark karo
        visited.put(src,true);
        // custom recursion stack me dalo is call ko.
        DFSvisited.put(src,true);
        
        // neighbour ko iterate karo.
        for(int nbr : adj.get(src)){
            // agar visited nahi hai to visit karo.
            if(!visited.getOrDefault(nbr,false)){
                // aage ka ans nikalo.
                boolean ans = checkCycle(nbr,visited,DFSvisited,adj,safeNodes);
                // agar kahi cycle mila to true return kar do.
                if(ans) return ans;
            }else{
                // yaha pahuche matlab already visited hai ye neighbour
                // ab check karo ki kya ye wali call already stack me hai.
                // agar hai to cycle present hai bhai.
                if(DFSvisited.get(nbr)){
                    return true;
                }
            }
        }
        
        // yahi pe galti karenge bhai.
        // backtrack karo ( is call ko recursion stack se hata do )
        DFSvisited.put(src,false);
        // only this line is add up to the question "Cycle detection in directed graph"
        // if we reach till here then it means there is no cycle present and it is a safe node, so add it.
        safeNodes.add(src);
        return false;
    }
    


    List<Integer> eventualSafeNodes(int V, List<List<Integer>> adj) {

            
        Map<Integer, Boolean> visited = new HashMap<>();
        Map<Integer, Boolean> DFSvisited = new HashMap<>();
        List<Integer> safeNodes = new ArrayList<>();
        // ye for loop disconnected graph ko handle karta hai.
        for (int i = 0; i < V; i++) {
            if (!visited.getOrDefault(i, false)) {
                boolean ans = checkCycle(i, visited, DFSvisited, adj,safeNodes);
            }
        }
        
        // the question wants answer in sorted order so sort it 
        Collections.sort(safeNodes);
        
        return safeNodes;
    }
}

Prerequisite for this question :-  https://practice.geeksforgeeks.org/problems/detect-cycle-in-a-directed-graph/1

GFG :- https://practice.geeksforgeeks.org/problems/eventual-safe-states/1