import java.util.*;

class Pair {
    int node;
    int weight;

    Pair(int n, int w) {
        this.node = n;
        this.weight = w;
    }
}

class PairWeightComparator implements Comparator<Pair> {
    @Override
    public int compare(Pair pair1, Pair pair2) {
        // Compare pairs based on their weights in increasing order
        return Integer.compare(pair1.weight, pair2.weight);

        // or
        // return (pair1.weight - pair2.weight);
    }
}

class Graphs {

    // Store the adjacency list with weights
    Map<Integer, List<Pair>> adjList = new HashMap<>();

    // Add an edge with weight to the graph
    public void addEdgeWithWeight(int u, int v, int w, boolean directed) {

        // directed = true -> Directed Graph.
        // directed = false -> Undirected Graph.

        if (adjList.get(u) == null) {
            List<Pair> neighbours = new ArrayList<>();
            adjList.put(u, neighbours);
        }

        // Create an edge from u to v with weight w.
        adjList.get(u).add(new Pair(v, w));

        // If it is an undirected graph, v should also point to u.
        if (!directed) {
            // Create an edge from v to u with the same weight w.
            if (adjList.get(v) == null) {
                List<Pair> neighbours = new ArrayList<>();
                adjList.put(v, neighbours);
            }
            adjList.get(v).add(new Pair(u, w));
        }

    }

    // Print the adjacency list with weights
    public void printAdjListWithWeight() {
        for (Map.Entry<Integer, List<Pair>> e : adjList.entrySet()) {
            System.out.print(e.getKey() + " -> ");

            for (Pair p : e.getValue()) {
                System.out.print("(" + p.node + "," + p.weight + "), ");
            }
            System.out.println();
        }

    }

    // Dijkstra's algorithm for finding the shortest paths from a source node
    public void dijsktra(int src, int n) {
        int dist[] = new int[n];
        Arrays.fill(dist, Integer.MAX_VALUE);
        TreeSet<Pair> st = new TreeSet<>(new PairWeightComparator()); // Reverse order

        // Initial steps
        st.add(new Pair(src, 0));
        dist[src] = 0;

        while (!st.isEmpty()) {

            // Fetch the smallest element from st
            Pair topElement = st.first();
            int node = topElement.node;
            int distance = topElement.weight;

            // Remove it from the set
            st.pollFirst();

            // Traverse neighbors
            for (Pair nbr : adjList.getOrDefault(node, new ArrayList<>())) {
                if (distance + nbr.weight < dist[nbr.node]) {
                    // Update the distances

                    // 1. Update in the priority queue (st)
                    if (st.contains(nbr)) {
                        st.remove(nbr);
                    }

                    // 2. Update in the distances array (dist)
                    dist[nbr.node] = distance + nbr.weight;
                    st.add(new Pair(nbr.node, dist[nbr.node]));
                }
            }
        }

        // Print the computed distances
        for (int x : dist) {
            System.out.print(x + ",");
        }

    }
}

public class Solution {

    public static void main(String[] args) {
        // Create a Graphs object
        Graphs g = new Graphs();

        // Add edges with weights to the graph (an undirected graph)
        g.addEdgeWithWeight(6, 3, 2, false);
        g.addEdgeWithWeight(6, 1, 14, false);
        g.addEdgeWithWeight(3, 1, 9, false);
        g.addEdgeWithWeight(3, 2, 10, false);
        g.addEdgeWithWeight(1, 2, 7, false);
        g.addEdgeWithWeight(2, 4, 15, false);
        g.addEdgeWithWeight(4, 3, 11, false);
        g.addEdgeWithWeight(6, 5, 9, false);
        g.addEdgeWithWeight(4, 5, 6, false);

        // Print the adjacency list with weights
        g.printAdjListWithWeight();

        // Run Dijkstra's algorithm from node 6 to compute the shortest paths
        g.dijsktra(6, 7);

    }
}

---------------------------------------------------------------------------------------------------------------------------

// Create a Pair class to represent vertices and their weights
class Pair implements Comparable<Pair> {
    int vertex;  // Vertex number
    int weight;  // Weight of the edge

    public Pair(int vertex, int weight) {
        this.vertex = vertex;
        this.weight = weight;
    }

    @Override
    public int compareTo(Pair other) {
        // Compare pairs based on their weights
        return Integer.compare(this.weight, other.weight);
    }
}

// Main solution class
class Solution {
    // Function to find the shortest distance of all the vertices
    // from the source vertex S.
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int source) {
        // Create an array to store the shortest distances from the source
        int[] distances = new int[V];
        Arrays.fill(distances, Integer.MAX_VALUE);  // Initialize distances with infinity
        distances[source] = 0;  // Distance to the source vertex is 0

        // Create a priority queue to select the next vertex to explore
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        pq.offer(new Pair(source, 0));  // Add the source vertex to the priority queue with distance 0

        // Dijkstra's algorithm
        while (!pq.isEmpty()) {
            Pair current = pq.poll();  // Get the vertex with the minimum distance from the queue
            int u = current.vertex;  // Current vertex
            int dist = current.weight;  // Distance to the current vertex

            if (dist > distances[u]) {
                continue;  // Skip if this vertex has been visited with a shorter path
            }

            ArrayList<ArrayList<Integer>> nbrs = adj.get(u);  // Get neighbors of the current vertex

            for (ArrayList<Integer> neighbor : nbrs) {
                int v = neighbor.get(0);  // Neighbor vertex
                int weight = neighbor.get(1);  // Weight of the edge to the neighbor

                // Relaxation step: Update the distance if a shorter path is found
                if (dist + weight < distances[v]) {
                    distances[v] = dist + weight;
                    pq.offer(new Pair(v, distances[v]));  // Add the updated distance to the queue
                }
            }
        }

        return distances;  // Return the array of shortest distances
    }
}


GFG :- https://practice.geeksforgeeks.org/problems/implementing-dijkstra-set-1-adjacency-matrix/1
