class Tree
{
   
   static void left(Node root, int level , ArrayList<Integer> ans){
       if(root == null) return ;
       
       // only store the answer if curent node data
       // is the first element of the current level
       if(level == ans.size()){
           ans.add(root.data);
       }
       
       // recursive call
       left(root.left,level+1,ans);
       left(root.right,level+1,ans);
   }

    //Function to return list containing elements of left view of binary tree.
    ArrayList<Integer> leftView(Node root){
    
        ArrayList<Integer> result = new ArrayList<>();
        if (root == null) {
            return result;
        }
        // pass root current level and list to helping function
        left(root,0,result);
        
        return result;
    }
}

GFG :- https://practice.geeksforgeeks.org/problems/left-view-of-binary-tree/1

CodeStudio :- https://www.codingninjas.com/studio/problems/left-view-of-a-binary-tree_920519?leftPanelTab=0