import java.util.*;

public class Solution {
    public static int subarraySum(int[] nums, int k) {
        // Create a HashMap to store cumulative sums and their counts.
        HashMap<Integer, Integer> mp = new HashMap<>();
        
        int sum = 0;   // Initialize the cumulative sum.
        int ans = 0;   // Initialize the answer variable.
        mp.put(sum, 1);  // Initialize the HashMap with a sum of 0 and count of 1 (at the beginning).

        // Iterate through the elements in the 'nums' array.
        for (int num : nums) {
            sum += num;  // Update the cumulative sum.
            int find = sum - k;  // Calculate the desired cumulative sum to find in the HashMap.

            // Check if the desired cumulative sum is present in the HashMap.
            if (mp.containsKey(find)) {
                ans += mp.get(find);  // Update the answer by adding the count of the desired cumulative sum.
            }

            // Update the HashMap with the current cumulative sum and its count.
            mp.put(sum, mp.getOrDefault(sum, 0) + 1);
        }

        // Return the final answer, which represents the count of subarrays with a sum equal to 'k'.
        return ans;
    }
}

Steps: 1. Create a map and Initially put (0,1), which means we have a subarray with 0 sum.
       2. Iterate the array and keep adding each element to the sum.
       3. Check if we have the (sum - k) in the map, if yes then it means that we have already have summed up to k , counter of subarray.
       4. Check if we have the sum in the map , if not then put it into the map.

LeetCode : https://leetcode.com/problems/subarray-sum-equals-k/

CodeStudio : https://www.codingninjas.com/studio/problems/subarray-sums-i_1467103?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTabValue=SUBMISSION