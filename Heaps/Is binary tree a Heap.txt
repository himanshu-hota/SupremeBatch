
class Pair{
    boolean x;
    int y;
    Pair(boolean x, int y){
        this.x = x;
        this.y = y;
    }
}

class Solution {
    
    static Pair helper(Node root){
        if(root == null) return new Pair(true,Integer.MIN_VALUE);
        
        // every leaf node is a CBT
        if(root.left == null && root.right == null) return new Pair(true,root.data);
        
        // get status of left
        Pair left = helper(root.left);
        // get status of right
        Pair right = helper(root.right);
        
        // if left is a CBT
        // if right is a CBT
        // and current node is larger than left and right child 
        // then only it is a CBT
        if((left.x && right.x) && (root.data > left.y && root.data > right.y)){
            return new Pair(true,root.data);
        }else{ // otherwise not a CBT
            return new Pair(false,Integer.MAX_VALUE);
        }
    }
    
       static int countNodes(Node root)
    {
        if (root == null)
            return (0);
        return (1 + countNodes(root.left) + countNodes(root.right));
    }
  
    
     static boolean isComplete(Node root, int index, int number_nodes)
    {
        // An empty tree is complete
        if (root == null)       
           return true;
  
        // If index assigned to current node is more than
        // number of nodes in tree, then tree is not complete
        if (index >= number_nodes)
           return false;
  
        // Recur for left and right subtrees
        return (isComplete(root.left, 2 * index + 1, number_nodes)
            && isComplete(root.right, 2 * index + 2, number_nodes));
  
    }
    
    boolean isHeap(Node root) {
        int nodes = countNodes(root);
        boolean isCompleteBT = isComplete(root,0,nodes);
        if(isCompleteBT){
            Pair ans = helper(root);
            return ans.x;            
        }else{
            return false;
        }

    }
}



GFG :- https://practice.geeksforgeeks.org/problems/is-binary-tree-heap/1