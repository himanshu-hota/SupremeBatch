class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates); // Sort the candidates array in ascending order
        List<Integer> currentCombination = new ArrayList<>(); // Track the current combination
        List<List<Integer>> uniqueCombinations = new ArrayList<>(); // Store unique combinations
        backtrack(candidates, target, currentCombination, uniqueCombinations, 0); // Call the backtracking method
        return uniqueCombinations; // Return the unique combinations
    }

    private void backtrack(int[] candidates, int remainingTarget, List<Integer> currentCombination,
                           List<List<Integer>> uniqueCombinations, int startIndex) {

        if (remainingTarget == 0) {
            // If the remaining target is zero, the current combination is a valid solution
            uniqueCombinations.add(new ArrayList<>(currentCombination)); // Add the current combination to the result
            return; // Exit the method
        }

        for (int i = startIndex; i < candidates.length; i++) {
            if (i > startIndex && candidates[i] == candidates[i - 1]) {
                // Skip duplicates to avoid duplicate combinations
                continue; // Skip to the next iteration of the loop
            }

            if (candidates[i] > remainingTarget) {
                // Optimization: Stop further exploration as the remaining candidates are larger than the target
                break; // Exit the loop
            }

            currentCombination.add(candidates[i]); // Add the current candidate to the combination
            backtrack(candidates, remainingTarget - candidates[i], currentCombination, uniqueCombinations, i + 1);
            // Recursively explore the remaining candidates with the updated target and combination
            currentCombination.remove(currentCombination.size() - 1); // Remove the last element from the combination
        }
    }
}


LeetCode :- https://leetcode.com/problems/combination-sum-ii/description/
