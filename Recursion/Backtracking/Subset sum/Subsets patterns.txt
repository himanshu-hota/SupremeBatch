// Get all subsets

class Solution {

       public void solve(int[] arr ,int i,List<List<Integer>> ans,List<Integer> curr){
        
        if( i >= arr.length){
            ans.add(new ArrayList<>(curr));
            return;
        }
        
        
        // include
        curr.add(arr[i]);
        solve(arr,i+1,ans,curr);
        curr.remove(curr.size() - 1);
        
        // exclude
        solve(arr,i+1,ans,curr);
        
    }

    public List<List<Integer>> subsetsWithDup(int[] nums) {

        List<List<Integer>> ans = new ArrayList<>();

        if(nums.length == 0) return ans;

        solve(nums,0,ans,new ArrayList<>());

        return ans;
    }

}


// Sum of subsets

class Solution {

       public void solve(int[] arr ,int i,List<List<Integer>> ans,List<Integer> curr){
        
        if( i >= arr.length){
            ans.add(new ArrayList<>(curr));
            return;
        }
        
        
        // include
        curr.add(arr[i]);
        solve(arr,i+1,ans,curr);
        curr.remove(curr.size() - 1);
        
        // exclude
        solve(arr,i+1,ans,curr);
        
    }

    public List<List<Integer>> subsetsWithDup(int[] nums) {

        List<List<Integer>> ans = new ArrayList<>();

        if(nums.length == 0) return ans;

        solve(nums,0,ans,new ArrayList<>());

        return ans;
    }

}