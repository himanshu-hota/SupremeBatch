// Method 1

public class Solution {

    static void insertInOrder(Stack<Integer> stack, int target) {
        if (stack.isEmpty() || stack.peek() <= target) {
            stack.push(target); // If the stack is empty or the top element is less than or equal to the target, push the target onto the stack.
        } else {
            int temp = stack.pop(); // Pop the top element from the stack.
            insertInOrder(stack, target); // Recursively call insertInOrder to insert the target in the correct sorted position.
            stack.push(temp); // Push back the popped element onto the stack.
        }
    }

    public static void sortStack(Stack<Integer> stack) {
        if (!stack.isEmpty()) {
            int temp = stack.pop(); // Pop the top element from the stack.
            sortStack(stack); // Recursively call sortStack to sort the remaining elements in the stack.
            insertInOrder(stack, temp); // Insert the popped element in its correct sorted position within the stack.
        }
    }

}


// Method 2

import java.util.Stack;

class GfG {
    
    // Function to sort a stack in ascending order
    public Stack<Integer> sort(Stack<Integer> s) {
        
        // Create an auxiliary stack to store elements in sorted order
        Stack<Integer> st = new Stack<Integer>();
        
        // Process each element in the original stack
        while (!s.isEmpty()) {
            // Pop an element from the original stack
            int temp = s.pop();
            
            // Move elements from the auxiliary stack to the original stack until the correct position for temp is found
            while (!st.isEmpty() && st.peek() < temp) {
                s.push(st.pop());
            }
            
            // Place temp in its correct position in the auxiliary stack
            st.push(temp);
        }
        
        // Move elements back from the auxiliary stack to the original stack to get the sorted order
        while (!st.isEmpty()) {
            s.push(st.pop());
        }
        
        // Return the sorted stack
        return s;
    }
}


Steps : 1. Idea => Pick an element and put it in its correct position.
        2. How are we doing that ? -> We pick an item from the original stack and put into aux/second stack only if it is smaller than the element on the top of aux/second stack.  
        3. > or < any operator can be used based on ascending or descendin order.

CodeStudio :- https://www.codingninjas.com/codestudio/problems/sort-a-stack_985275?leftPanelTab=1

GFG :- https://practice.geeksforgeeks.org/problems/sort-a-stack/1