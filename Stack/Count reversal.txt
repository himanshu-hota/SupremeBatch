static int countRev(String s) {
    // Check if the length of the string is odd
    // If so, the string cannot be balanced by reversals, return -1
    if (s.length() % 2 != 0)
        return -1;
    
    int ans = 0; // Initialize the count of reversals
    
    Stack<Character> st = new Stack<>(); // Create a stack to process the string
    
    // Iterate over each character in the string
    for (int i = 0; i < s.length(); i++) {
        char ch = s.charAt(i);
        
        if (ch == '{') {
            st.push(ch); // Push opening brace onto the stack
        } else {
            if (!st.isEmpty() && st.peek() == '{') {
                st.pop(); // Pop the opening brace from the stack if a closing brace is encountered
            } else {
                st.push(ch); // Push the closing brace onto the stack if it doesn't have a corresponding opening brace
            }
        }
    }
    
    // Process the remaining unbalanced braces in the stack
    while (!st.isEmpty()) {
        char a = st.pop();
        char b = st.pop();
        
        if (a == b) {
            ans += 1; // Increment count if the popped braces are the same (balanced pair)
        } else {
            ans += 2; // Increment count if the popped braces are different (unbalanced pair)
        }
    }
    
    return ans; // Return the count of reversals required
}


GFG :- https://practice.geeksforgeeks.org/problems/count-the-reversals0401/1

LeetCode :- https://leetcode.com/problems/minimum-number-of-swaps-to-make-the-string-balanced/description/