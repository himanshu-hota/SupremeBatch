class Solution {
    public String minWindow(String s, String p) {

        int m = s.length();
        int n = p.length();

        // if the first string is smaller then no answer is possible
        if(m<n) return "";

        // pointer to traverse each character in the given string.
        int start = 0;
        // starting point of the ans
        int startIndex = -1;
        // count of matched character
        int count = 0;
        // min size of window
        int minLength = Integer.MAX_VALUE;
        // map to store chars
        int sMap[] = new int[256];
        int pMap[] = new int[256];

        // put all characters of pattern string to map
        for(int i =0;i< n; i++){
            pMap[p.charAt(i)]++;
        }


        for(int i = 0; i<m; i++){

            // add current character to sMap
            sMap[s.charAt(i)]++;

            // found match of a character
            if(sMap[s.charAt(i)] <= pMap[s.charAt(i)]){
                count++;
            }

            // if matched all chars
            if(count == n){

                // reduce window
                // if count of chars in main string is greater than pattern || curr char is not present in pattern string then reduce the size of window
                while(sMap[s.charAt(start)] > pMap[s.charAt(start)] || pMap[s.charAt(start)] == 0){
                    // reduc count of chars in sMap
                    sMap[s.charAt(start)]--;
                    // reduce the window size
                    start++;
                }

                // update window
                int currWindowSize = i - start + 1;
                if(currWindowSize < minLength){
                    // update min window size
                    minLength = currWindowSize;
                    // update starting point of ans
                    startIndex = start;
                }
                
            }

           

        }

        if(startIndex == -1) return "";
        else return s.substring(startIndex,startIndex + minLength);
    }
}

LeetCode :- https://leetcode.com/problems/minimum-window-substring/

GFG :- https://practice.geeksforgeeks.org/problems/smallest-window-in-a-string-containing-all-the-characters-of-another-string-1587115621/1

CodeStudio :- https://www.codingninjas.com/studio/problems/smallest-window-in-string-containing-all-the-characters-of-another-string_981175