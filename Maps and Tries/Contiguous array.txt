import java.util.*;

class Solution {

    static int largestSubArrayWith0Sum(int arr[]){
        if(arr.length == 0 ) return 0;
        
        Map<Integer,Integer> map = new HashMap<>();
        int n = arr.length;
        int csum = 0;
        int ans = 0;
        for(int i = 0; i< n ; i++){
            // add current num to csum(total sum)
            csum += arr[i];
            // if at any moment the sum till now is 0 then store length
            if(csum == 0){
                ans = Math.max(ans,i+1);
            }else if(map.getOrDefault(csum,-1) == -1){ // if csum is not added yet then add it to map
                map.put(csum,i);
            }else{ // if we already have csum in the map then store length
                ans = Math.max(ans,i - map.get(csum));
            }
            
        }
        
        
        return ans;
    }

    public int findMaxLength(int[] nums) {

        if(nums.length == 0) return -1;
        
        // replace all 0 with -1 in the array.
        // [1 0 1 0 1 1] will look like this [1 - 1 1 - 1 -1] 
        // now we can use logic of largestSubArrayWith0Sum
        int n = nums.length;
        for(int i = 0; i< n; i++){
            if(nums[i] == 0) nums[i] = -1;
        }

        return largestSubArrayWith0Sum(nums);


    }
}